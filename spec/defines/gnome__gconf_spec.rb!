require 'spec_helper'
describe 'desktop::gnome::gconf' do
  let(:title) { 'rspec' }

  describe 'with defaults for all parameters' do
    it { should compile.with_all_deps }
    it { should contain_class('desktop::gnome::gconf') }
    it { should_not contain_file_line('set_gconf_name') }
    it { should_not contain_gnome__gconf('set_wallpaper') }
    it { should_not contain_file('wallpaper') }
  end

  describe 'with gconf_name set to valid string <$(HOME)/.gconf-lts-redhat>' do
    let(:params) { { :gconf_name => '$(HOME)/.gconf-lts-redhat' } }

    it do
      should contain_file_line('set_gconf_name').with({
        'ensure' => 'present',
        'path'   => '/etc/gconf/2/path',
        'line'   => 'xml:readwrite:$(HOME)/.gconf-lts-redhat',
        'match'  => '^xml:readwrite:',
      })
    end
  end

  describe 'with wallpaper_path set to valid string </usr/share/wallpapers/rspec.png>' do
    let(:params) { { :wallpaper_path => '/usr/share/wallpapers/rspec.png' } }

    it do
      should contain_gnome__gconf('set_wallpaper').with({
        'ensure'  => 'present',
        'user'    => 'root',
        'keyname' => '/desktop/gnome/background/picture_filename',
        'type'    => 'string',
        'value'   => '/usr/share/wallpapers/rspec.png',
      })
    end
  end

  describe 'with wallpaper_source set to valid string <puppet:///modules/desktop/rspec.png>' do
    let(:params) { { :wallpaper_source => 'puppet:///modules/desktop/rspec.png' } }

    it 'should fail' do
      expect { should contain_class(subject) }.to raise_error(Puppet::Error, /desktop::gnome::gconf::wallpaper_path is needed but undefiend\. Please define a valid path/)
    end
  end

  describe 'with wallpaper_path and wallpaper_source set to valid values' do
    let(:params) do
      {
        :wallpaper_path   => '/usr/share/wallpapers/rspec.png',
        :wallpaper_source => 'puppet:///modules/desktop/rspec.png',
      }
    end

    it do
      should contain_file('wallpaper').with({
        'ensure' => 'present',
        'path'   => '/usr/share/wallpapers/rspec.png',
        'owner'  => 'root',
        'group'  => 'root',
        'mode'   => '0644',
        'source' => 'puppet:///modules/desktop/rspec.png',
        'before' => 'Gnome::Gconf[set_wallpaper]',
      })
    end
    it do
      should contain_gnome__gconf('set_wallpaper').with({
        'ensure'  => 'present',
        'user'    => 'root',
        'keyname' => '/desktop/gnome/background/picture_filename',
        'type'    => 'string',
        'value'   => '/usr/share/wallpapers/rspec.png',
      })
    end
  end

  describe 'variable type and content validations' do
    # set needed custom facts and variables
    let(:facts) do
      {
        #:fact => 'value',
      }
    end
    let(:mandatory_params) do
      {
        #:param => 'value',
      }
    end
    let(:pre_condition) do
      "user { 'root': }" # needed for gnome dependency module
    end

    validations = {
      'absolute_path' => {
        :name    => %w(wallpaper_path),
        :valid   => %w(/absolute/filepath /absolute/directory/),
        :invalid => ['string', %w(array), { 'ha' => 'sh' }, 3, 2.42, true, false, nil],
        :message => 'is not an absolute path',
      },
      'string' => {
        :name    => %w(gconf_name),
        :valid   => ['string'],
        :invalid => [%w(array), { 'ha' => 'sh' }, 3, 2.42, true, false],
        :message => 'is not a string',
      },
      'string wallpaper_source' => {
        :name    => %w(wallpaper_source),
        :params  => { :wallpaper_path => '/usr/share/wallpapers/rspec.png' },
        :valid   => ['puppet:///modules/desktop/rspec.png'],
        :invalid => [%w(array), { 'ha' => 'sh' }, 3, 2.42, true, false],
        :message => 'is not a string',
      },
    }

    validations.sort.each do |type, var|
      var[:name].each do |var_name|
        var[:params] = {} if var[:params].nil?
        var[:valid].each do |valid|
          context "when #{var_name} (#{type}) is set to valid #{valid} (as #{valid.class})" do
            let(:params) { [mandatory_params, var[:params], { :"#{var_name}" => valid, }].reduce(:merge) }
            it { should compile }
          end
        end

        var[:invalid].each do |invalid|
          context "when #{var_name} (#{type}) is set to invalid #{invalid} (as #{invalid.class})" do
            let(:params) { [mandatory_params, var[:params], { :"#{var_name}" => invalid, }].reduce(:merge) }
            it 'should fail' do
              expect { should contain_class(subject) }.to raise_error(Puppet::Error, /#{var[:message]}/)
            end
          end
        end
      end # var[:name].each
    end # validations.sort.each
  end # describe 'variable type and content validations'
end
